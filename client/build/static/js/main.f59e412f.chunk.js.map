{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","components/Balance.js","components/trans.js","components/transaction.js","utils/format.js","components/translist.js","components/addtrans.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","loading","transactions","payload","filter","transaction","_id","error","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","a","axios","get","res","data","response","id","delete","config","headers","post","Provider","value","getTransactions","deleteTransaction","addTransaction","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","Trans","amounts","income","expense","className","Transaction","sign","text","Math","abs","toString","replace","onClick","Translist","useEffect","key","Addtrans","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","class","htmlFor","onChange","target","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f59e412f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div>\r\n            <h2>Expense Tracker</h2>\r\n            <p>Developed using ReactJS</p>\r\n        </div>\r\n    )\r\n}\r\n","export default (state, action) => {\r\n    switch(action.type) {\r\n      case 'GET_TRANSACTIONS':\r\n        return {\r\n          ...state,\r\n          loading: false,\r\n          transactions: action.payload\r\n        }\r\n      case 'DELETE_TRANSACTION':\r\n        return {\r\n          ...state,\r\n          transactions: state.transactions.filter(transaction => transaction._id !== action.payload)\r\n        }\r\n      case 'ADD_TRANSACTION':\r\n        return {\r\n          ...state,\r\n          transactions: [...state.transactions, action.payload]\r\n        }\r\n      case 'TRANSACTION_ERROR':\r\n        return {\r\n          ...state,\r\n          error: action.payload\r\n        }\r\n      default:\r\n        return state;\r\n    }\r\n  }","import React, { createContext, useReducer } from 'react';\r\nimport axios from 'axios';\r\nimport AppReducer from './AppReducer.js';\r\n\r\n\r\n// Initial State\r\nconst initialState = {\r\n    transactions: [],\r\n    error: null,\r\n    loading: true\r\n}\r\n\r\n// Create context \r\nexport const GlobalContext = createContext(initialState);\r\n\r\n// Provider comp\r\nexport const GlobalProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n    // actions\r\n    async function getTransactions() {\r\n        try {\r\n            const res = await axios.get('/api/v1/transactions');\r\n\r\n            dispatch({\r\n                type: 'GET_TRANSACTIONS',\r\n                payload: res.data.data\r\n            });\r\n        } catch (err) {\r\n            dispatch({\r\n                type: 'TRANSACTION_ERROR',\r\n                payload: err.response.data.error\r\n              });\r\n        }\r\n    }\r\n\r\n\r\n    async function deleteTransaction(id) {\r\n      try {\r\n        await axios.delete(`/api/v1/transactions/${id}`);\r\n  \r\n        dispatch({\r\n          type: 'DELETE_TRANSACTION',\r\n          payload: id\r\n        });\r\n      } catch (err) {\r\n        dispatch({\r\n          type: 'TRANSACTION_ERROR',\r\n          payload: err.response.data.error\r\n        });\r\n      }\r\n    }\r\n\r\n    async function addTransaction(transaction) {\r\n        const config = {\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        }\r\n    \r\n        try {\r\n          const res = await axios.post('/api/v1/transactions', transaction, config);\r\n    \r\n          dispatch({\r\n            type: 'ADD_TRANSACTION',\r\n            payload: res.data.data\r\n          });\r\n        } catch (err) {\r\n          dispatch({\r\n            type: 'TRANSACTION_ERROR',\r\n            payload: err.response.data.error\r\n          });\r\n        }\r\n      }\r\n\r\n    return(\r\n    \r\n    // This allows us to use in any component by use usecontext\r\n    // Which is the react hook\r\n    <GlobalContext.Provider value={{\r\n        transactions: \r\n        state.transactions,\r\n        error: state.error,\r\n        loading: state.loading,\r\n        getTransactions,\r\n        deleteTransaction,\r\n        addTransaction\r\n        }}>\r\n        {children} \r\n    </GlobalContext.Provider>);\r\n}","import React, {useContext} from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\n\r\n\r\nexport const Balance = () => {\r\n    const { transactions } = useContext(GlobalContext);\r\n\r\n    const amounts = transactions.map(transaction => transaction.amount);\r\n\r\n    const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h4>Your Balance</h4>\r\n            <h1>{total}</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\n\r\nexport const Trans = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  const amounts = transactions.map(transaction => transaction.amount);\r\n\r\n  const income = amounts\r\n    .filter(item => item > 0)\r\n    .reduce((acc, item) => (acc += item), 0)\r\n    .toFixed(2);\r\n\r\n  const expense = (\r\n    amounts.filter(item => item < 0).reduce((acc, item) => (acc += item), 0) *\r\n    -1\r\n  ).toFixed(2);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"inc-exp-container\">\r\n        <div>\r\n          <h4>Income</h4>\r\n          <p className=\"money plus\">{income}</p>\r\n        </div>\r\n        <div>\r\n          <h4>Expense</h4>\r\n          <p className=\"money minus\">{expense}</p>\r\n        </div>\r\n      </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport { numberWithCommas } from '../utils/format';\r\n\r\nexport const Transaction = ({ transaction }) => {\r\n    const { deleteTransaction } = useContext(GlobalContext);\r\n  \r\n    const sign = transaction.amount < 0 ? '-' : '+';\r\n  \r\n    return (\r\n      <li className={transaction.amount < 0 ? 'minus' : 'plus'}>\r\n        {transaction.text} <span>{sign}${numberWithCommas(Math.abs(transaction.amount))}</span><button onClick={() => deleteTransaction(transaction._id)} className=\"delete-btn\">x</button>\r\n      </li>\r\n    )\r\n  }","  export function numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }","import React, { useContext, useEffect } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport { Transaction } from './transaction';\r\n\r\nexport const Translist = () => {\r\n    const { transactions, getTransactions } = useContext(GlobalContext);        \r\n\r\n    useEffect(() => {\r\n        getTransactions();\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n           <h3>History</h3>\r\n            <ul className=\"list\">\r\n                {transactions.map(transaction => (<Transaction key={transaction._id} transaction={transaction} />))}\r\n            </ul> \r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\n\r\nexport const Addtrans = () => {\r\n  // Hook\r\n  const [text, setText] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n\r\n  const { addTransaction } = useContext(GlobalContext);\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const newTransaction = {\r\n      id: Math.floor(Math.random() * 10000000000),\r\n      text,\r\n      amount: +amount // Turns string into a number\r\n    }\r\n\r\n    addTransaction(newTransaction);\r\n  }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Add new transaction</h3>\r\n            <form onSubmit={onSubmit}>\r\n        <div class=\"form-control\">\r\n          <label htmlFor=\"text\">Company / Person / Item</label>\r\n          <input \r\n          type=\"text\" \r\n          value={text} \r\n          onChange={(e) => {setText(e.target.value)}} \r\n          placeholder=\"Enter text...\" />\r\n        </div>\r\n        <div class=\"form-control\">\r\n          <label htmlFor=\"amount\">Amount <br /> (negative = expense, positive = income)</label>\r\n          <input \r\n          type=\"number\" \r\n          value={amount} \r\n          onChange={(e) => {setAmount(e.target.value)}}\r\n          placeholder=\"Enter amount...\" />\r\n        </div>\r\n            <button class=\"btn\">Add transaction</button>\r\n        </form>\r\n        </div>\r\n    )\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Header } from './components/Header';\nimport { Balance } from './components/Balance';\nimport { Trans } from './components/trans';\nimport { Translist } from './components/translist';\nimport { Addtrans } from './components/addtrans';\n\nimport { GlobalProvider } from './context/GlobalState';\n\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalProvider>\n    <Header />\n    <div className=\"container\">\n      <Balance />\n      <Trans />\n      <Translist />\n      <Addtrans />\n    </div>\n    </GlobalProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}